<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.itwillbs.camcar.mapper.MyPageMapper">
	
<!-- 마이페이지 예약정보 조회 -(이용 예정인 차량 조회) -->
	<select id="selectReserveList" resultType="hashmap">
		SELECT p.res_idx, r.res_rental_date, r.res_return_date, r.car_idx, b.brc_name,
		 m.mem_name, p.pay_status, c.car_company,c.car_model, r.car_insurance,
		 r.res_fee, pm.pay_method_name, cm.car_model_image, cm.car_logo_image, c.car_old,
		 di.mem_id, di.dri_name, di.dri_birthday 
		FROM res_info r JOIN brc_info b
		ON r.brc_rent_name = b.brc_name
		JOIN pay_info p
		ON p.res_idx = r.res_idx
		JOIN car_info c
		ON r.car_idx = c.car_idx
		JOIN member_info m
        ON m.mem_idx = r.mem_idx
        JOIN pay_method pm
        ON pm.pay_method_idx = p.pay_method_idx
        JOIN car_model_info cm
        ON cm.car_model = c.car_model
        JOIN drivers_info di
        ON di.mem_id = m.mem_id
		WHERE m.mem_id = #{id}
		AND r.res_rental_date > now()
		
		ORDER BY r.res_rental_date
		
	</select>
	
	
	
	
	
	
	
<!-- 	나의 1:1문의 게시물 목록 조회 -->
	<select id="selectQnaList" resultType="qna">
		SELECT *
		FROM qna
		<!--  
		SELECT mem_id, qna_type_name, qna_inquery, qna_number, qna_date
		FROM qna
		JOIN qna_type
		ON qna.qna_type_idx = qna_type.qna_type_idx-->
		<if test="!searchKeyword.equals('')">
			WHERE 
			<choose>
				<when test="searchType.equals('subject')">
					qna_inquery LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<when test="searchType.equals('content')">
<!-- 					board_content LIKE '%${searchKeyword}%' -->
					qna_content LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<when test="searchType.equals('subject_content')">
					qna_subject LIKE CONCAT('%', #{searchKeyword}, '%')
					OR qna_content LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<otherwise>
					1 = 1  -- WHERE 절을 포함시키되 조건을 걸고 싶지 않을 경우 활용 가능한 조건식(무조건 true 가 나오는 식이면 OK)
				</otherwise>
			</choose>
		</if>
		LIMIT
			#{startRow}     
			, #{listLimit}
	</select>

	<!-- 1:1 문의 게시물 상세보기 -->
	<select id="selectMyQnaDetail" resultType="qna">
		SELECT *
		FROM qna
		WHERE qna_number = #{qna_number}
	</select>
	
	<!-- 1:1 문의 게시물 삭제 -->
	<delete id="deleteMyQna">
		DELETE FROM qna
		WHERE qna_number = #{qna_number}
	</delete>
	
	<!-- 전체 게시물 갯수 조회 -->
	<!-- 글 목록 조회 시 검색 기능 추가 -->
	<select id="selectQnaListCount" resultType="int">
		SELECT COUNT(*)
		FROM qna
		<if test="!searchKeyword.equals('')">
			WHERE 
			<choose>
				<when test="searchType.equals('inquery')">
					qna_inquery LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<when test="searchType.equals('content')">
					qna_content LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<when test="searchType.equals('inquery_content')">
					qna_inquery LIKE CONCAT('%', #{searchKeyword}, '%')
					OR qna_content LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<when test="searchType.equals('name')">
					mem_id LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<otherwise>
					1 = 1  -- WHERE 절을 포함시키되 조건을 걸고 싶지 않을 경우 활용 가능한 조건식(무조건 true 가 나오는 식이면 OK)
				</otherwise>
			</choose>
		</if>
	</select>

<!-- 회원 상세정보 조회 SELECT-->
	<!-- 아이디(id)가 일치하는 레코드 조회-->
	<select id="selectMember" resultType="member">
		SELECT *
		FROM member_info
		WHERE mem_id = #{mem_id}
	</select>
	
	
	
	<!-- 회원 탈퇴 - UPDATE -->
	<!-- 아이디(id)가 일치하는 레코드의 회원상태(mem_status) 컬럼값을 3 으로 수정 -->
	<update id="updateWithdrawMember">
		UPDATE member_info
		SET
			mem_status = 3
			, mem_withdraw_date = now()
		WHERE
			mem_id = #{mem_id}
	</update>
	
<!-- 	운전자 상세정보 조회 SELECT -->
	<select id="selectDriver" resultType="driver">
<!-- 		SELECT  -->
<!-- 			m.mem_id, d.dri_name, d.dri_tel, d.dri_birthday -->
<!-- 			, d.lic_num, d,lic_info, d.lic_issue_date -->
<!-- 			, d.lic_expiration_date -->
<!-- 		FROM  -->
<!-- 			drivers_info d -->
<!-- 		JOIN  -->
<!-- 			member_info m -->
<!-- 		ON  -->
<!-- 			m.mem_id = d.mem_id -->
<!-- 		WHERE  -->
<!-- 			m.mem_id = #{mem_id} -->
		SELECT *
		FROM drivers_info
		WHERE mem_id = #{id}
	 </select>
	
	<!-- 회원 정보 수정 - UPDATE -->
	<!-- 비밀번호 변경 -->
	<update id="updateMemPasswd">
		UPDATE member_info
		SET mem_passwd = #{mem_passwd}
		WHERE mem_tel = #{mem_tel}
	</update>
	
	<update id="updateMemAdd">
		UPDATE member_info
		SET 
			mem_post_code = #{mem_post_code}
			,mem_add1 = #{mem_add1}
			,mem_add2 = #{mem_add2}
		WHERE 
			mem_tel = #{mem_tel}
<!-- 			1=1 -->
	</update>
	

	
</mapper>